/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

/// <reference types="unplugin-vue-router/client" />

import type {
  // type safe route locations
  RouteLocationTypedList,
  RouteLocationResolvedTypedList,
  RouteLocationNormalizedTypedList,
  RouteLocationNormalizedLoadedTypedList,
  RouteLocationAsString,
  RouteLocationAsRelativeTypedList,
  RouteLocationAsPathTypedList,

  // helper types
  // route definitions
  RouteRecordInfo,
  ParamValue,
  ParamValueOneOrMore,
  ParamValueZeroOrMore,
  ParamValueZeroOrOne,

  // vue-router extensions
  _RouterTyped,
  RouterLinkTyped,
  RouterLinkPropsTyped,
  NavigationGuard,
  UseLinkFnTyped,

  // data fetching
  _DataLoader,
  _DefineLoaderOptions,
} from 'unplugin-vue-router/types'

declare module 'vue-router/auto/routes' {
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '/components/': RouteRecordInfo<'/components/', '/components', Record<never, never>, Record<never, never>>,
    '/components/button': RouteRecordInfo<'/components/button', '/components/button', Record<never, never>, Record<never, never>>,
    '/components/chartPie': RouteRecordInfo<'/components/chartPie', '/components/chartPie', Record<never, never>, Record<never, never>>,
    '/components/checkbox': RouteRecordInfo<'/components/checkbox', '/components/checkbox', Record<never, never>, Record<never, never>>,
    '/components/dataGrid': RouteRecordInfo<'/components/dataGrid', '/components/dataGrid', Record<never, never>, Record<never, never>>,
    '/components/dateTimePicker': RouteRecordInfo<'/components/dateTimePicker', '/components/dateTimePicker', Record<never, never>, Record<never, never>>,
    '/components/dialog': RouteRecordInfo<'/components/dialog', '/components/dialog', Record<never, never>, Record<never, never>>,
    '/components/dialog_service': RouteRecordInfo<'/components/dialog_service', '/components/dialog_service', Record<never, never>, Record<never, never>>,
    '/components/dragDrop': RouteRecordInfo<'/components/dragDrop', '/components/dragDrop', Record<never, never>, Record<never, never>>,
    '/components/form': RouteRecordInfo<'/components/form', '/components/form', Record<never, never>, Record<never, never>>,
    '/components/icon': RouteRecordInfo<'/components/icon', '/components/icon', Record<never, never>, Record<never, never>>,
    '/components/input_number': RouteRecordInfo<'/components/input_number', '/components/input_number', Record<never, never>, Record<never, never>>,
    '/components/input_text': RouteRecordInfo<'/components/input_text', '/components/input_text', Record<never, never>, Record<never, never>>,
    '/components/pop': RouteRecordInfo<'/components/pop', '/components/pop', Record<never, never>, Record<never, never>>,
    '/components/progressBar': RouteRecordInfo<'/components/progressBar', '/components/progressBar', Record<never, never>, Record<never, never>>,
    '/components/radio': RouteRecordInfo<'/components/radio', '/components/radio', Record<never, never>, Record<never, never>>,
    '/components/select': RouteRecordInfo<'/components/select', '/components/select', Record<never, never>, Record<never, never>>,
    '/components/select_box': RouteRecordInfo<'/components/select_box', '/components/select_box', Record<never, never>, Record<never, never>>,
    '/components/slider': RouteRecordInfo<'/components/slider', '/components/slider', Record<never, never>, Record<never, never>>,
    '/components/switch': RouteRecordInfo<'/components/switch', '/components/switch', Record<never, never>, Record<never, never>>,
    '/components/tabs': RouteRecordInfo<'/components/tabs', '/components/tabs', Record<never, never>, Record<never, never>>,
    '/components/textarea': RouteRecordInfo<'/components/textarea', '/components/textarea', Record<never, never>, Record<never, never>>,
    '/components/virtualScroll': RouteRecordInfo<'/components/virtualScroll', '/components/virtualScroll', Record<never, never>, Record<never, never>>,
    '/introduction/': RouteRecordInfo<'/introduction/', '/introduction', Record<never, never>, Record<never, never>>,
    '/introduction/main.ts': RouteRecordInfo<'/introduction/main.ts', '/introduction/main/ts', Record<never, never>, Record<never, never>>,
    '/introduction/packageJson': RouteRecordInfo<'/introduction/packageJson', '/introduction/packageJson', Record<never, never>, Record<never, never>>,
    '/introduction/postcss.config': RouteRecordInfo<'/introduction/postcss.config', '/introduction/postcss/config', Record<never, never>, Record<never, never>>,
    '/introduction/tailwind.config': RouteRecordInfo<'/introduction/tailwind.config', '/introduction/tailwind/config', Record<never, never>, Record<never, never>>,
    '/introduction/tsconfig': RouteRecordInfo<'/introduction/tsconfig', '/introduction/tsconfig', Record<never, never>, Record<never, never>>,
    '/introduction/viteConfig': RouteRecordInfo<'/introduction/viteConfig', '/introduction/viteConfig', Record<never, never>, Record<never, never>>,
    '/sandbox/': RouteRecordInfo<'/sandbox/', '/sandbox', Record<never, never>, Record<never, never>>,
    '/sandbox/chartGantt': RouteRecordInfo<'/sandbox/chartGantt', '/sandbox/chartGantt', Record<never, never>, Record<never, never>>,
    '/sandbox/datagrid': RouteRecordInfo<'/sandbox/datagrid', '/sandbox/datagrid', Record<never, never>, Record<never, never>>,
    '/sandbox/datagridOdata': RouteRecordInfo<'/sandbox/datagridOdata', '/sandbox/datagridOdata', Record<never, never>, Record<never, never>>,
    '/sandbox/nyDatagrid': RouteRecordInfo<'/sandbox/nyDatagrid', '/sandbox/nyDatagrid', Record<never, never>, Record<never, never>>,
    '/sandbox/testForms': RouteRecordInfo<'/sandbox/testForms', '/sandbox/testForms', Record<never, never>, Record<never, never>>,
    '/sandbox/virScroll': RouteRecordInfo<'/sandbox/virScroll', '/sandbox/virScroll', Record<never, never>, Record<never, never>>,
    '/styles/': RouteRecordInfo<'/styles/', '/styles', Record<never, never>, Record<never, never>>,
    '/styles/colors': RouteRecordInfo<'/styles/colors', '/styles/colors', Record<never, never>, Record<never, never>>,
    '/styles/colorsTheme': RouteRecordInfo<'/styles/colorsTheme', '/styles/colorsTheme', Record<never, never>, Record<never, never>>,
  }
}

declare module 'vue-router/auto' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  /**
   * Type safe version of `RouteLocationNormalized` (the type of `to` and `from` in navigation guards).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalized<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationNormalizedLoaded` (the return type of `useRoute()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalizedLoaded<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationResolved` (the returned route of `router.resolve()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationResolved<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationResolvedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocation` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocation<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationRaw` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationRaw<Name extends keyof RouteNamedMap = keyof RouteNamedMap> =
    | RouteLocationAsString<RouteNamedMap>
    | RouteLocationAsRelativeTypedList<RouteNamedMap>[Name]
    | RouteLocationAsPathTypedList<RouteNamedMap>[Name]

  /**
   * Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParams<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['params']
  /**
   * Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParamsRaw<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['paramsRaw']

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuard<RouteNamedMap>): void
  export function onBeforeRouteUpdate(guard: NavigationGuard<RouteNamedMap>): void

  export const RouterLink: RouterLinkTyped<RouteNamedMap>
  export const RouterLinkProps: RouterLinkPropsTyped<RouteNamedMap>

  // Experimental Data Fetching

  export function defineLoader<
    P extends Promise<any>,
    Name extends keyof RouteNamedMap = keyof RouteNamedMap,
    isLazy extends boolean = false,
  >(
    name: Name,
    loader: (route: RouteLocationNormalizedLoaded<Name>) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>
  export function defineLoader<
    P extends Promise<any>,
    isLazy extends boolean = false,
  >(
    loader: (route: RouteLocationNormalizedLoaded) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>

  export {
    _definePage as definePage,
    _HasDataLoaderMeta as HasDataLoaderMeta,
    _setupDataFetchingGuard as setupDataFetchingGuard,
    _stopDataFetchingScope as stopDataFetchingScope,
  } from 'unplugin-vue-router/runtime'
}

declare module 'vue-router' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export interface TypesConfig {
    beforeRouteUpdate: NavigationGuard<RouteNamedMap>
    beforeRouteLeave: NavigationGuard<RouteNamedMap>

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
  }
}
