import {
  normalizeClass,
  createElementVNode,
  render,
  hydrate,
  createApp,
  Transition,
  TransitionGroup,
  vModelText,
  vModelCheckbox,
  vModelRadio,
  vModelSelect,
  vModelDynamic,
  openBlock,
  toDisplayString,
  createVNode,
  createBlock,
  createElementBlock,
  createTextVNode,
  ref,
  resolveComponent,
  resolveDynamicComponent,
  withCtx,
  useCssVars,
  withModifiers,
  withKeys,
  vShow,
  reactive,
  readonly,
  unref,
  proxyRefs,
  isRef,
  toRef,
  toRefs,
  isProxy,
  isReactive,
  isReadonly,
  customRef,
  triggerRef,
  shallowRef,
  shallowReactive,
  shallowReadonly,
  markRaw,
  toRaw,
  computed,
  watch,
  watchEffect,
  onBeforeMount,
  onMounted,
  onBeforeUpdate,
  onUpdated,
  onBeforeUnmount,
  onUnmounted,
  onActivated,
  onDeactivated,
  onRenderTracked,
  onRenderTriggered,
  onErrorCaptured,
  provide,
  inject,
  nextTick,
  defineComponent,
  defineAsyncComponent,
  defineProps,
  defineEmits,
  getCurrentInstance,
  h,
  cloneVNode,
  mergeProps,
  isVNode,
  Fragment,
  Text,
  Comment,
  Static,
  Teleport,
  Suspense,
  KeepAlive,
  BaseTransition,
  withDirectives,
  createRenderer,
  createHydrationRenderer,
  queuePostFlushCb,
  warn,
  handleError,
  callWithErrorHandling,
  callWithAsyncErrorHandling,
  resolveDirective,
  registerRuntimeCompiler,
  isRuntimeOnly,
  useTransitionState,
  resolveTransitionHooks,
  setTransitionHooks,
  getTransitionRawChildren,
  initCustomFormatter,
  pushScopeId,
  popScopeId,
  withScopeId,
  renderList,
  toHandlers,
  renderSlot,
  createSlots,
  setBlockTracking,
  createCommentVNode,
  createStaticVNode,
  camelize,
  capitalize,
  toHandlerKey,
  transformVNodeArgs,
  version
} from "vue";

var runtimeDom = /*#__PURE__*/ Object.freeze({
  __proto__: null,
  normalizeClass: normalizeClass,
  createElementVNode: createElementVNode,
  render: render,
  hydrate: hydrate,
  createApp: createApp,
  useCssVars: useCssVars,
  Transition: Transition,
  TransitionGroup: TransitionGroup,
  vModelText: vModelText,
  vModelCheckbox: vModelCheckbox,
  vModelRadio: vModelRadio,
  vModelSelect: vModelSelect,
  vModelDynamic: vModelDynamic,
  withModifiers: withModifiers,
  withKeys: withKeys,
  vShow: vShow,
  reactive: reactive,
  ref: ref,
  readonly: readonly,
  unref: unref,
  proxyRefs: proxyRefs,
  isRef: isRef,
  toRef: toRef,
  toRefs: toRefs,
  isProxy: isProxy,
  isReactive: isReactive,
  isReadonly: isReadonly,
  customRef: customRef,
  triggerRef: triggerRef,
  shallowRef: shallowRef,
  shallowReactive: shallowReactive,
  shallowReadonly: shallowReadonly,
  markRaw: markRaw,
  toRaw: toRaw,
  computed: computed,
  watch: watch,
  watchEffect: watchEffect,
  onBeforeMount: onBeforeMount,
  onMounted: onMounted,
  onBeforeUpdate: onBeforeUpdate,
  onUpdated: onUpdated,
  onBeforeUnmount: onBeforeUnmount,
  onUnmounted: onUnmounted,
  onActivated: onActivated,
  onDeactivated: onDeactivated,
  onRenderTracked: onRenderTracked,
  onRenderTriggered: onRenderTriggered,
  onErrorCaptured: onErrorCaptured,
  provide: provide,
  inject: inject,
  nextTick: nextTick,
  defineComponent: defineComponent,
  defineAsyncComponent: defineAsyncComponent,
  defineProps: defineProps,
  defineEmits: defineEmits,
  getCurrentInstance: getCurrentInstance,
  h: h,
  createVNode: createVNode,
  cloneVNode: cloneVNode,
  mergeProps: mergeProps,
  isVNode: isVNode,
  Fragment: Fragment,
  Text: Text,
  Comment: Comment,
  Static: Static,
  Teleport: Teleport,
  Suspense: Suspense,
  KeepAlive: KeepAlive,
  BaseTransition: BaseTransition,
  withDirectives: withDirectives,
  createRenderer: createRenderer,
  createHydrationRenderer: createHydrationRenderer,
  queuePostFlushCb: queuePostFlushCb,
  warn: warn,
  handleError: handleError,
  callWithErrorHandling: callWithErrorHandling,
  callWithAsyncErrorHandling: callWithAsyncErrorHandling,
  resolveComponent: resolveComponent,
  resolveDirective: resolveDirective,
  resolveDynamicComponent: resolveDynamicComponent,
  registerRuntimeCompiler: registerRuntimeCompiler,
  isRuntimeOnly: isRuntimeOnly,
  useTransitionState: useTransitionState,
  resolveTransitionHooks: resolveTransitionHooks,
  setTransitionHooks: setTransitionHooks,
  getTransitionRawChildren: getTransitionRawChildren,
  initCustomFormatter: initCustomFormatter,
  withCtx: withCtx,
  pushScopeId: pushScopeId,
  popScopeId: popScopeId,
  withScopeId: withScopeId,
  renderList: renderList,
  toHandlers: toHandlers,
  renderSlot: renderSlot,
  createSlots: createSlots,
  openBlock: openBlock,
  createBlock: createBlock,
  setBlockTracking: setBlockTracking,
  createTextVNode: createTextVNode,
  createElementBlock: createElementBlock,
  createCommentVNode: createCommentVNode,
  createStaticVNode: createStaticVNode,
  toDisplayString: toDisplayString,
  camelize: camelize,
  capitalize: capitalize,
  toHandlerKey: toHandlerKey,
  transformVNodeArgs: transformVNodeArgs,
  version: version
});

export { runtimeDom };
